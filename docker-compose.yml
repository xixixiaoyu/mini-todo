version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports:
      - '80:80'
    depends_on:
      - backend
    networks:
      - todolist-network
    restart: unless-stopped

  # 后端服务
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USERNAME=todolist_user
      - DB_PASSWORD=todolist_password
      - DB_NAME=todolist
    depends_on:
      - database
    networks:
      - todolist-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 数据库服务 (PostgreSQL)
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: todolist
      POSTGRES_USER: todolist_user
      POSTGRES_PASSWORD: todolist_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - todolist-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U todolist_user -d todolist']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存服务 (可选)
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - todolist-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  todolist-network:
    driver: bridge
